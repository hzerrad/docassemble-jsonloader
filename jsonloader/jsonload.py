import io
import orjson
from jsonloader.jsondict import JsonDict
from jsonloader.jsonlist import JsonList


def is_json(string):
    return string[0] == '{'


class JsonLoader:
    """
    A class that loads a json file generated by Docassemble, and generate an easy-to-use Python object.
    """

    def __init__(self, jsonfile):
        """
        :param jsonfile: A json file in str or byte. Also accepts path to json
        """
        if isinstance(jsonfile, str):
            if not is_json(jsonfile):
                with open(jsonfile) as file:
                    self.__origin = orjson.loads(file.read())
            else:  # stringified json
                self.__origin = orjson.loads(jsonfile)

        elif isinstance(jsonfile, io.TextIOBase):  # instance of File
            self.__origin = orjson.loads(jsonfile.read())
        elif isinstance(jsonfile, bytes) or isinstance(jsonfile, bytearray):
            self.__origin = orjson.loads(jsonfile)
        else:
            raise AttributeError('Invalid Json file. Accepted types are: str, filepath, byte and bytearray.')

        self.__slots__ = ['__origin'] + list(self.__origin.keys())
        # Initialize hierarchy
        self.set_attributes()

    def get_attributes(self):
        attr = list(self.__slots__)
        attr.remove("__origin")
        return attr

    def get_raw_object(self):
        """
        Gets the json object as raw Python dictionary.
        :return: dict
        """
        return self.__origin

    def get_raw_json(self, to_string=True):
        """
        Gets the json object as byte/string
        :param to_string: return json in UTF-8 encoded string format (bytes otherwise)
        :return: str/byte
        """
        dump = orjson.dumps(self.__origin)
        return dump.decode('utf-8') if to_string else dump

    def dump(self, path):
        """
        Saves the raw json to a file.
        :param path: path to file
        """
        if path[-5:] != '.json':
            path = path + '.json'
        with open(path, 'w') as file:
            file.write(self.get_raw_json())

    def set_attributes(self):
        """
        Initializes the different elements/nodes of the Docassemble JSON file
        :return: tuple of elements
        """
        for key in self.__origin.keys():
            records = self.__origin[key]
            if isinstance(records, list):
                key_list = []  # global list
                key_sections = []  # global sectionSelector finder

                # iterate each item
                for record in records:
                    key_list.append(JsonDict(record['Fields'][0], record['sectionSelector']))
                    key_sections.append(record['sectionSelector'])
                self.__setattr__(key.lower(), JsonList(key_list, key_sections))

            elif isinstance(records, dict):
                self.__setattr__(key.lower(), JsonDict(records, None))
            else:
                raise ParseError('Invalid JSON. Please verify that it conforms with Docassemble-generate'
                                 'JSON objects.')


class ParseError(LookupError):
    pass
