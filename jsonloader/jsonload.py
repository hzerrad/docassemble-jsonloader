import io
import orjson
from src.jsondict import JsonDict
from src.jsonlist import JsonList


def is_json(string):
    return string[0] == '{'


class JsonLoader:
    """
    A class that loads a json file generated by Docassemble, and generate an easy-to-use Python object.
    """
    __slots__ = ['__origin', 'forms', 'collections', 'contact', 'project']

    def __init__(self, jsonfile):
        if isinstance(jsonfile, str):
            if not is_json(jsonfile):
                with open(jsonfile) as file:
                    self.__origin = orjson.loads(file.read())
            else:
                self.__origin = orjson.loads(jsonfile)

        elif isinstance(jsonfile, io.TextIOBase):
            self.__origin = orjson.loads(jsonfile.read())
        elif isinstance(jsonfile, bytes) or isinstance(jsonfile, bytearray):
            self.__origin = orjson.loads(jsonfile)
        else:
            raise AttributeError('Invalid Json file. Accepted types are: str, filepath, byte and bytearray.')

        self.forms, self.collections, self.contact, self.project = self.set_attributes()

    def get_raw_object(self):
        return self.__origin

    def get_raw_json(self, to_string=True):
        dump = orjson.dumps(self.__origin)
        return dump.decode('utf-8') if to_string else dump

    def set_attributes(self):
        forms = self.__origin['Forms']
        collections = self.__origin['Collections']

        formslist = []
        formsections = []
        for form in forms:
            formslist.append(JsonDict(form['Fields'][0], form['sectionSelector']))
            formsections.append(form['sectionSelector'])
        formslist = JsonList(formslist, formsections)

        collectionslist = []
        collectionsections = []
        for collection in collections:
            collectionslist.append(JsonDict(collection['Fields'][0], collection['sectionSelector']))
            collectionsections.append(collection['sectionSelector'])
        collectionslist = JsonList(collectionslist, collectionsections)

        contact = JsonDict(self.__origin['Contact'], None)
        project = JsonDict(self.__origin['Project'], None)
        return formslist, collectionslist, contact, project

